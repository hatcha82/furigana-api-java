/**
 * This is automatically generated by sprout plug-in.
 */
package com.furiganahub.api.common.dao;

import java.io.Reader;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.session.SqlSession;
import org.mybatis.spring.SqlSessionTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 * 
 * @since
 * @author Administrator
 */
@Repository
public class SPCallerDAO {
	@Autowired
	private SqlSessionTemplate sqlSessionTemplate;

	// @Autowired
	// private SessionUtil sessionUtil;

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	public List<Map<String, Object>> selectSPMetaData(Map<String, Object> map) {
		return sqlSessionTemplate.selectList("com.furiganahub.api.common.procedureMeta", map);
	}

	/**
	 * SP Meta Data를 가지고 SP Auto Binding 실행후 결과 값을 Map형식으로 반환
	 * 
	 * @param request
	 * @param I_SP_FULL_NAME : 호출될 SP 명 Package SP일 경우 Package.SP명 으로 전달 (반드시 . 포함)
	 * @param metaArgList    : MetaData List
	 * @param mapArgData     : SP 실행 Paramter 값
	 * @param connection
	 * @return
	 * @throws Exception
	 */
	public Map<String, Object> callSimpleSP(HttpServletRequest request, String I_SP_FULL_NAME,
			List<Map<String, Object>> metaArgList, Map<String, Object> mapArgData, Connection connectionTransaction)
			throws Exception {
		SqlSession session = null;
		Connection connection = null;
		CallableStatement callableStatement = null;

		if (connectionTransaction == null) {
			session = sqlSessionTemplate.getSqlSessionFactory().openSession();
		}

		String callSql = "{call [[I_SP_FULL_NAME]][[ARGUMENT_BINDING_STRING]]}";
		String ARGUMENT_NAME = "";
		String DATA_TYPE = "";
		String IN_OUT = "";
		String ARGUMENT_BINDING_STRING = getArgumentBindingString(metaArgList);
		String PARAM = "";
		String SELECTLOGQUERY = "SELECT , " + I_SP_FULL_NAME + " SP_NAME";
		int SEQUENCE = 0;

		Map<String, Object> result = new HashMap<String, Object>();

		HashMap<String, Object> CONVERTED_PARAM = new HashMap<String, Object>();
		// sessionUtil.addUserBaseInfo(request.getSession(), (HashMap<String, Object>)
		// mapArgData);
		for (Entry<String, Object> entry : mapArgData.entrySet()) {
			String key = entry.getKey();
			String newKey = key.replace("_S_", "S_");
			Object value = entry.getValue();
			String nullStr = String.valueOf(value);
			if (nullStr != null && nullStr.toLowerCase().equals("null")) {
				value = null;
			}

			if (key.startsWith("_S_")) {
				CONVERTED_PARAM.put(newKey.toUpperCase(), String.valueOf(entry.getValue()));
			} else {
				CONVERTED_PARAM.put(key, String.valueOf(entry.getValue()));
			}
		}
		if (CONVERTED_PARAM.containsKey("I_PROGRESS_GUID") == false) {
			CONVERTED_PARAM.put("I_PROGRESS_GUID", UUID.randomUUID().toString());
		}
		if (CONVERTED_PARAM.containsKey("S_PROGRAM_ID") == false) {
			CONVERTED_PARAM.put("S_PROGRAM_ID", "NONE");
		}
		mapArgData = CONVERTED_PARAM;

		try {
			if (connectionTransaction == null) {
				connection = session.getConnection();
			} else {
				connection = connectionTransaction;
			}
			connection.setAutoCommit(false);
			callSql = callSql.replace("[[I_SP_FULL_NAME]]", I_SP_FULL_NAME);
			callSql = callSql.replace("[[ARGUMENT_BINDING_STRING]]", ARGUMENT_BINDING_STRING);
			callableStatement = connection.prepareCall(callSql);

			// META DATA와 유저 Data Binding
			for (Map<String, Object> argInfo : metaArgList) {
				ARGUMENT_NAME = (String) argInfo.get("ARGUMENT_NAME");
				DATA_TYPE = (String) argInfo.get("DATA_TYPE");
				IN_OUT = (String) argInfo.get("IN_OUT");
				SEQUENCE = Integer.parseInt(String.valueOf(argInfo.get("SEQUENCE")));

				if (IN_OUT.trim().equals("IN") || IN_OUT.trim().equals("INOUT")) {
					Object value = mapArgData.get(ARGUMENT_NAME);
					if (DATA_TYPE == "CLOB") {
						callableStatement.setObject(SEQUENCE, String.valueOf(value), java.sql.Types.CLOB);
					} else {
						callableStatement.setObject(SEQUENCE, value);
					}

					if (DATA_TYPE.equals("varchar") || DATA_TYPE.equals("text")) {
						String strValue = ",\t" + "'" + String.valueOf(value) + "'" + "\t /* " + ARGUMENT_NAME
								+ "*/ \n";
						strValue = (strValue.toLowerCase().equals("null"))
								? ",\t" + String.valueOf(value) + "\t /* " + ARGUMENT_NAME + "*/ \n"
								: strValue;
						PARAM += strValue;
					} else if (DATA_TYPE.equals("decimal")) {

						PARAM += ",\t" + String.valueOf(value) + "\t /* " + ARGUMENT_NAME + "*/ \n";
					} else if (DATA_TYPE.equals("int")) {

						PARAM += ",\t" + String.valueOf(value) + "\t /* " + ARGUMENT_NAME + "*/ \n";
					} else {
						PARAM += ",\t" + String.valueOf(value) + "\t /* " + ARGUMENT_NAME + "*/ \n";
					}

				} else { // OUT PARAMETER
					callableStatement.registerOutParameter(SEQUENCE, getSQLType(DATA_TYPE));
					PARAM += ", " + "@" + ARGUMENT_NAME + " /* " + ARGUMENT_NAME + "*/ ";
					SELECTLOGQUERY += "," + "@" + ARGUMENT_NAME;
				}
			}

			// Loging
			PARAM = PARAM.replaceFirst(",", "");
			PARAM = "call " + I_SP_FULL_NAME + "(\n" + PARAM + ");\n\n\n" + SELECTLOGQUERY + ";";
			logger.debug("[Method:callSimpleSP]   callableStatement.execute() \n\n" + callSql);
			logger.debug("[Method:callSimpleSP]   Paramter Info \n\n" + PARAM);

			boolean isResultSet = callableStatement.execute();

			// OutPut Data Auto Binding
			for (Map<String, Object> argInfo : metaArgList) {
				ARGUMENT_NAME = (String) argInfo.get("ARGUMENT_NAME");
				DATA_TYPE = (String) argInfo.get("DATA_TYPE");
				IN_OUT = (String) argInfo.get("IN_OUT");
				SEQUENCE = Integer.parseInt(String.valueOf(argInfo.get("SEQUENCE")));

				if (IN_OUT.trim().equals("INOUT")) {
					Object value = callableStatement.getObject(SEQUENCE);
					result.put(ARGUMENT_NAME, value);
				} else if (IN_OUT.trim().equals("OUT")) {
//					if (getSQLType(DATA_TYPE) == OracleTypes.CURSOR) {
//						ResultSet rs = (ResultSet) callableStatement.getObject(SEQUENCE);
//						ArrayList<Map<String, Object>> list = resultSetToList(rs);
//						result.put(ARGUMENT_NAME, list);
//					} else if (getSQLType(DATA_TYPE) == OracleTypes.CLOB) {
//
//						result.put(ARGUMENT_NAME, getClob(callableStatement.getClob(SEQUENCE)));
//					} else 

					if (DATA_TYPE.equals("varchar")) {

						result.put(ARGUMENT_NAME, callableStatement.getString(SEQUENCE));
					} else if (DATA_TYPE.equals("decimal")) {

						result.put(ARGUMENT_NAME, callableStatement.getBigDecimal(SEQUENCE));
					} else if (DATA_TYPE.equals("int")) {

						result.put(ARGUMENT_NAME, callableStatement.getInt(SEQUENCE));
					}
				}
			}

			int rsCount = 0;
			do {
				if (isResultSet) {
					ResultSet rs = callableStatement.getResultSet();
					ArrayList<Map<String, Object>> list = resultSetToList(rs);
					result.put("O_RESULT" + String.format("%02d", rsCount), list);
					rsCount++;
					rs.close();
				}
				isResultSet = callableStatement.getMoreResults();
			} while (isResultSet);

		} catch (Exception e) {
			logger.error("[Method:callSimpleSP] callableStatement.execute() Error : " + e.getMessage(), e);
			throw new Exception("Method:callSimpleSP] connection.close() Error : \n" + PARAM + "\n" + e.getMessage());

		} finally {

			try {
				if (connectionTransaction == null) {
					connection.commit();
					connection.close();
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block

				// e.printStackTrace();
				logger.error("[Method:callSimpleSP] connection.close() Error : " + e.getMessage());

				throw new Exception(
						"Method:callSimpleSP] connection.close() Error : \n" + PARAM + "\n" + e.getMessage());
			}

			try {
				callableStatement.close();
			} catch (Exception ee) {
				logger.error(ee.toString(), ee);
			}
		}
		result.put("O_SP_SCRIPT", PARAM);
		return result;
	}

	public Map<String, Object> callBatchSP(Map<String, Object> map, HttpServletRequest request) throws Exception {
		// TODO Auto-generated method stub

		SqlSession session = sqlSessionTemplate.getSqlSessionFactory().openSession();
		Connection connection = session.getConnection();

		String I_SP_FULL_NAME = "";
		String ARGUMENT_NAME = "";
		String DATA_TYPE = "";
		String IN_OUT = "";
		String I_FLAG = "";

		/*
		 * { I_SP_LIST : [ {I_SP_FULL_NAME : "GRIDMASTER_M010" , I_FLAG : "Y" ,
		 * I_SP_PARAM_DATASET : [{},{}] } , {I_SP_FULL_NAME : "GRIDMASTER_M011" , I_FLAG
		 * : "Y" , I_SP_PARAM_DATASET : [{},{}] } ]}
		 */
		ArrayList<Map<String, Object>> I_SP_PARAM_DATASET = null;
		ArrayList<Map<String, Object>> SP_LIST = (ArrayList<Map<String, Object>>) map.get("I_SP_LIST");
		Map<String, Object> hashMapBatchResult = new HashMap<String, Object>();
		Map<String, Object> hashMapMetaList = new HashMap<String, Object>();

		for (Map<String, Object> mapSPObject : SP_LIST) {
			I_SP_FULL_NAME = (String) mapSPObject.get("I_SP_FULL_NAME");

			HashMap<String, Object> hashMapMeta = (HashMap<String, Object>) selectSPMetaData(mapSPObject);
			ArrayList<Map<String, Object>> metaArgList = (ArrayList<Map<String, Object>>) hashMapMeta
					.get("O_META_RESULT");
			hashMapMetaList.put(I_SP_FULL_NAME, metaArgList);
		}

		try {
			for (Map<String, Object> mapSPObject : SP_LIST) {
				I_SP_FULL_NAME = (String) mapSPObject.get("I_SP_FULL_NAME");
				I_FLAG = (String) mapSPObject.get("I_FLAG");
				I_SP_PARAM_DATASET = (ArrayList<Map<String, Object>>) mapSPObject.get("I_SP_PARAM_DATASET");
				ArrayList<Map<String, Object>> metaArgList = (ArrayList<Map<String, Object>>) hashMapMetaList
						.get(I_SP_FULL_NAME);

				for (Map<String, Object> row : I_SP_PARAM_DATASET) {
					HashMap<String, Object> PARAM = null;
					if (I_FLAG.equals("Y")) {
						PARAM = AddIUnderFlag(row);
					} else {
						PARAM = (HashMap<String, Object>) row;
					}
					try {

						Map<String, Object> hashMapResult = callSimpleSP(request, I_SP_FULL_NAME, metaArgList, PARAM,
								connection);
					} catch (Exception e) {
						throw e;
					}
					hashMapBatchResult.put(I_SP_FULL_NAME + "_" + I_SP_PARAM_DATASET.indexOf(row), hashMapBatchResult);

				}
				connection.commit();

			}

		} catch (Exception e) {
			connection.rollback();
			logger.error("[callBatchSP] connection.close() Error : " + e.getMessage(), e);
		} finally {
			if (connection.isClosed() == false) {
				connection.close();
			}

		}
		return hashMapBatchResult;

	}

	public HashMap<String, Object> AddIUnderFlag(Map<String, Object> row2) {
		HashMap<String, Object> CONVERTED_PARAM = new HashMap<String, Object>();

		for (Entry<String, Object> row : row2.entrySet()) {
			String key = row.getKey();
			CONVERTED_PARAM.put("I_" + key, String.valueOf(row.getValue()));

		}
		return CONVERTED_PARAM;
	}

	/**
	 * ORACLE Data Type을 정수 형식으로 변환
	 * 
	 * @param DATA_TYPE
	 * @return
	 */
	private int getSQLType(String DATA_TYPE) {
//		if (DATA_TYPE.equals("REF CURSOR")) {
//			return OracleTypes.CURSOR;
//		} else if (DATA_TYPE.equals("NUMBER")) {
//			return OracleTypes.NUMBER;
//		} else if (DATA_TYPE.equals("VARCHAR2")) {
//			return OracleTypes.VARCHAR;
//		} else if (DATA_TYPE.equals("CLOB")) {
//			return OracleTypes.CLOB;
//		} else {
//			return -1;
//		}
		return -1;
	}

	/**
	 * SP Medata List를 가지고 SP Exute CSV 반환
	 * 
	 * @param metaArgList : SP Meata Data List
	 * @return : CSV의 SP excute paramter String 반환
	 */
	private String getArgumentBindingString(List<Map<String, Object>> metaArgList) {
		String argumentBindingString = "";
		String ARGUMENT_NAME = "";
		for (Map<String, Object> argInfo : metaArgList) {
			ARGUMENT_NAME = (String) argInfo.get("ARGUMENT_NAME");
			argumentBindingString += "?,";
		}

		if (argumentBindingString.length() != 0) {
			argumentBindingString = argumentBindingString.substring(0, argumentBindingString.length() - 1);
		}

		return "(" + argumentBindingString + ")";
	}

	/**
	 * Result Set을 ArrayList로 변환
	 * 
	 * @param rs
	 * @return
	 * @throws SQLException
	 */
	private ArrayList<Map<String, Object>> resultSetToList(ResultSet rs) throws SQLException {
		ResultSetMetaData md = rs.getMetaData();
		int ColumnType = 0;
		int columns = md.getColumnCount();
		ArrayList<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();
		while (rs.next()) {
			Map<String, Object> row = new HashMap<String, Object>(columns);
			for (int i = 1; i <= columns; ++i) {
				ColumnType = md.getColumnType(i);
				if (Types.CLOB == ColumnType) {
					// mysql for md.getColumnLabel(i)
					// oracle for md.getColumnName(i)

					row.put(md.getColumnLabel(i), getClob(rs, i));
				} else {
					row.put(md.getColumnLabel(i), rs.getObject(i));
				}

			}
			rows.add(row);
		}
		return rows;
	}

	private Object getClob(Clob clob) {
		StringBuffer output = new StringBuffer();
		try {
			Reader input = clob.getCharacterStream();
			char[] buffer = new char[1024];
			int byteRead;
			while ((byteRead = input.read(buffer, 0, 1024)) != -1) {
				output.append(buffer, 0, byteRead);
			}
			input.close();
		} catch (Exception e) {

		}
		return output.toString();

	}

	private String getClob(ResultSet rs, int i) {
		// TODO Auto-generated method stub
		String text = "";
		Clob clob;
		try {

			clob = rs.getClob(i);
			if (clob != null) {
				text = clob.getSubString(1, (int) clob.length());
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			text = "";
		}

		// materialize CLOB onto client

		/*
		 * 
		 * StringBuffer output = new StringBuffer();
		 * 
		 * try { Reader input = rs.getCharacterStream("content"); char[] buffer = new
		 * char[1024]; int byteRead; while((byteRead=input.read(buffer,0,1024))!=-1){
		 * output.append(buffer,0,byteRead); } input.close(); } catch (Exception e) { //
		 * TODO: handle exception } output.toString();
		 */
		return text;
	}
}